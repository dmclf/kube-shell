#!/bin/bash

if !(which kubectl 2>&1 >/dev/null);then echo 'please install kubectl';exit 1;fi

declare -a NAMEARRAY
declare -a NAMESPACEARRAY
declare -a CLUSTERARRAY
declare -a ALPHABETARRAY 

bold=$(tput bold)
normal=$(tput sgr0)
cyan=$(tput setab 6)
red=$(tput setab 1)
green=$(tput setab 2)
blackfg=$(tput setaf 0)
redfg=$(tput setaf 1)
bluefg=$(tput setaf 4)
greenfg=$(tput setaf 2)
highlight="${greenfg}"
selectlight="${bold}${redfg}"

count=0;for alphabet in {a..z};do ALPHABETARRAY[$count]=$alphabet ; count=$((count+1));done

namespaceinuse=$(kubectl config view|grep namespace: | awk '{print $2}')
if test -z "$namespaceinuse";then namespaceinuse='default';fi
defaultcontext=$(kubectl config current-context)

trap exittrap INT TERM EXIT HUP EXIT
exittrap ()
{
kubectl config use-context $defaultcontext
stty sane
exit 1
}

SAVEDEFAULTS ()
{
kubedefcontext=$(kubectl config current-context)
if test ! -z "$kubedefcontext"
then
echo "saving namespace $1 and context $kubedefcontext as default"
kubectl config set-context $kubedefcontext --namespace $1
kubectl config set-context $kubedefcontext
defaultcontext=$kubedefcontext
fi
}

CRONJOBS ()
{
kubectl get cronjob -o wide
echo
}

RESETPODS ()
{
unset NAMEARRAY
declare -a NAMEARRAY
}

CLUSTERSET ()
{
count=0
echo "available clusters"
for cluster in $(kubectl config get-clusters | grep -v ^NAME)
do
echo "${selectlight}${count}${normal} $cluster"
CLUSTERARRAY[$count]="$cluster"
count=$((count+1))
done
echo "select cluster"
read -s -r -n1 selected
kubectl config use-context ${CLUSTERARRAY[$selected]}
RESETPODS
}

NAMESPACESET ()
{
count=0
echo "available namespaces"
for namespaces in $(kubectl get namespaces | grep -v ^NAME | awk '{print $1":"$2":"$3}')
do
namespace=$(echo $namespaces | cut -f1 -d\:)
echo "${selectlight}${ALPHABETARRAY[$count]}${normal} $(echo $namespaces | tr \:  \  )"
NAMESPACEARRAY[$count]="$namespace"
count=$((count+1))
done
echo "select namespace"
read -s -r -n1 selected

for ((i=0; i < ${#ALPHABETARRAY[@]}; ++i)); do
    if [ "$selected" = "${ALPHABETARRAY[$i]}" ]; then
	selectednumber=$i
    fi
done
sleep 1
namespaceinuse=${NAMESPACEARRAY[${selectednumber}]}
RESETPODS
}

PODSSH ()
{
count=0
echo "available pods "
#echo "add exist clause"
if test -z "${NAMEARRAY[0]}"
then
for mess in $(kubectl -n $1 get pods -o wide | grep -v ^NAME | awk '{print $1":"$2":"$3":"$4":"$5":"$6":"$7}')
do
name=$(echo $mess | cut -f1 -d\:)
echo "${selectlight}${ALPHABETARRAY[$count]}${normal} $(echo $mess | tr \:  \  )"
NAMEARRAY[$count]="$name"
count=$((count+1))
done
else 
for ((i=0; i < ${#NAMEARRAY[@]}; ++i)); do
 echo "${selectlight}${ALPHABETARRAY[$i]}${normal} ${NAMEARRAY[$i]}"
done
fi
}


doclear=0
while true
do
if test $doclear -gt 0 ;then clear;fi
echo "${bold}cluster context: ${highlight}$(kubectl config current-context)${normal} ${bold}namespace: ${highlight}$namespaceinuse${normal}"
PODSSH $namespaceinuse
echo "
${bold}select a-z to bash to (${bold}Q${normal}-> Quit ${bold}C${normal}-> clustercontext-selection ${bold}N${normal}-> namespace selection ${bold}S${normal}-> save current contexts ${bold}J${normal}-> cronJobs ${bold}I${normal}->cluster-Info)"
read -s -r -n1 selected

for ((i=0; i < ${#ALPHABETARRAY[@]}; ++i)); do
    if [ "$selected" = "${ALPHABETARRAY[$i]}" ]; then
        selectednumber=$i
    fi
done

if [ "${selected}" == "Q" ]
then exit
elif [ "${selected}" == "I" ]
then
kubectl cluster-info
echo '
Viewing, Finding Resources

# Get commands with basic output
$ kubectl get services                          # List all services in the namespace
$ kubectl get pods --all-namespaces             # List all pods in all namespaces
$ kubectl get pods -o wide                      # List all pods in the namespace, with more details
$ kubectl get deployment my-dep                 # List a particular deployment

# Describe commands with verbose output
$ kubectl describe nodes my-node
$ kubectl describe pods my-pod

$ kubectl get services --sort-by=.metadata.name # List Services Sorted by Name

# List pods Sorted by Restart Count
$ kubectl get pods --sort-by=".status.containerStatuses[0].restartCount"

# Get the version label of all pods with label app=cassandra
$ kubectl get pods --selector=app=cassandra rc -o \
  jsonpath="{.items[*].metadata.labels.version}"

# Get ExternalIPs of all nodes
$ kubectl get nodes -o jsonpath="{.items[*].status.addresses[?(@.type=="ExternalIP")].address}"

# List Names of Pods that belong to Particular RC
# "jq" command useful for transformations that are too complex for jsonpath, it can be found at https://stedolan.github.io/jq/
$ sel=${$(kubectl get rc my-rc --output=json | jq -j ".spec.selector | to_entries | .[] | "\(.key)=\(.value),"")%?}
$ echo $(kubectl get pods --selector=$sel --output=jsonpath={.items..metadata.name})

# Check which nodes are ready
$ JSONPATH="{range .items[*]}{@.metadata.name}:{range @.status.conditions[*]}{@.type}={@.status};{end}{end}" \
 && kubectl get nodes -o jsonpath="$JSONPATH" | grep "Ready=True"

# List all Secrets currently in use by a pod
$ kubectl get pods -o json | jq ".items[].spec.containers[].env[]?.valueFrom.secretKeyRef.name" | grep -v null | sort | uniq


Interacting with running Pods

$ kubectl attach my-pod -i                            # Attach to Running Container
$ kubectl port-forward my-pod 5000:6000               # Forward port 6000 of Pod to your to 5000 on your local machine
$ kubectl exec my-pod -- ls /                         # Run command in existing pod (1 container case)
$ kubectl exec my-pod -c my-container -- ls /         # Run command in existing pod (multi-container case)
$ kubectl top pod POD_NAME --containers               # Show metrics for a given pod and its containers

Interacting with Nodes and Cluster

$ kubectl cordon my-node                                                # Mark my-node as unschedulable
$ kubectl drain my-node                                                 # Drain my-node in preparation for maintenance
$ kubectl uncordon my-node                                              # Mark my-node as schedulable
$ kubectl top node my-node                                              # Show metrics for a given node
$ kubectl cluster-info                                                  # Display addresses of the master and services
$ kubectl cluster-info dump                                             # Dump current cluster state to stdout
$ kubectl cluster-info dump --output-directory=/path/to/cluster-state   # Dump current cluster state to /path/to/cluster-state

# If a taint with that key and effect already exists, its value is replaced as specified.
$ kubectl taint nodes foo dedicated=special-user:NoSchedule

'
doclear=0
elif [ "${selected}" == "C" ]
then CLUSTERSET
doclear=1
elif [ "${selected}" == "J" ]
then CRONJOBS
doclear=0
elif [ "${selected}" == "N" ]
then NAMESPACESET
doclear=1
elif [ "${selected}" == "S" ]
then SAVEDEFAULTS $namespaceinuse
elif [[ "${selected}" = [a-z] ]]
then 
if test ! -z "${NAMEARRAY[$selectednumber]}"
then

option="b"
while [[ $option = [bpl] ]]
do
echo "what do you want to do on ${NAMEARRAY[$selectednumber]} ?
${selectlight}b${normal} try exec /bin/bash
${selectlight}p${normal} return logs of previously terminated
${selectlight}l${normal} show logs
${selectlight}d${normal} describe
${selectlight}y${normal} dump pod as yaml
${selectlight}Q${normal} quit
${bold}more logs.. DIY:${normal} kubectl -n $namespaceinuse logs --timestamps --since=1h ${NAMEARRAY[$selectednumber]}
${bold}more logs.. DIY:${normal} kubectl -n $namespaceinuse logs --timestamps ${NAMEARRAY[$selectednumber]}
${bold}tail .. DIY:${normal} kubectl -n $namespaceinuse logs -f ${NAMEARRAY[$selectednumber]}
${bold}any:${normal} go back"

read -s -r -n1 option

if [ "${option}" == "Q" ]
then exit
elif [ "${option}" == "b" ]
then
echo "trying to bash into ${NAMEARRAY[$selectednumber]}"
kubectl -n $namespaceinuse exec -ti ${NAMEARRAY[${selectednumber}]} -- env "TERM=${TERM:-xterm-256color}" /bin/bash
doclear=0
elif [ "${option}" == "d" ]
then kubectl -n $namespaceinuse describe pods ${NAMEARRAY[$selectednumber]}
doclear=0
elif [ "${option}" == "l" ]
then echo "trying to show (last 40)  logs for ${NAMEARRAY[$selectednumber]}"
doclear=0
kubectl -n $namespaceinuse logs --timestamps --tail=40 ${NAMEARRAY[$selectednumber]}
elif [ "${option}" == "y" ]
then 
echo "writing ${NAMEARRAY[$selectednumber]} yaml output to kube.${namespaceinuse}.${NAMEARRAY[$selectednumber]}.yaml"
kubectl -n $namespaceinuse get pod ${NAMEARRAY[$selectednumber]} -o yaml > "kube.${namespaceinuse}.${NAMEARRAY[$selectednumber]}.yaml"
doclear=0
elif [ "${option}" == "p" ]
then echo "trying to show previously terminated container logs for ${NAMEARRAY[$selectednumber]}"
kubectl -n $namespaceinuse logs --timestamps -p ${NAMEARRAY[$selectednumber]}
doclear=0
fi
done

fi
else
echo 'invalid option.. retry'
fi
done
